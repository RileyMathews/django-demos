/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedPlayerCharacter,
  PlayerCharacter,
} from '../models';
import {
    PatchedPlayerCharacterFromJSON,
    PatchedPlayerCharacterToJSON,
    PlayerCharacterFromJSON,
    PlayerCharacterToJSON,
} from '../models';

export interface SkyrimHelperApiPlayerCharactersCreateRequest {
    playerCharacter: PlayerCharacter;
}

export interface SkyrimHelperApiPlayerCharactersDestroyRequest {
    uuid: string;
}

export interface SkyrimHelperApiPlayerCharactersPartialUpdateRequest {
    uuid: string;
    patchedPlayerCharacter?: PatchedPlayerCharacter;
}

export interface SkyrimHelperApiPlayerCharactersRetrieveRequest {
    uuid: string;
}

export interface SkyrimHelperApiPlayerCharactersUpdateRequest {
    uuid: string;
    playerCharacter: PlayerCharacter;
}

/**
 * 
 */
export class SkyrimHelperApi extends runtime.BaseAPI {

    /**
     */
    async skyrimHelperApiPlayerCharactersCreateRaw(requestParameters: SkyrimHelperApiPlayerCharactersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerCharacter>> {
        if (requestParameters.playerCharacter === null || requestParameters.playerCharacter === undefined) {
            throw new runtime.RequiredError('playerCharacter','Required parameter requestParameters.playerCharacter was null or undefined when calling skyrimHelperApiPlayerCharactersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/skyrim-helper/api/player-characters/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlayerCharacterToJSON(requestParameters.playerCharacter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerCharacterFromJSON(jsonValue));
    }

    /**
     */
    async skyrimHelperApiPlayerCharactersCreate(requestParameters: SkyrimHelperApiPlayerCharactersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerCharacter> {
        const response = await this.skyrimHelperApiPlayerCharactersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async skyrimHelperApiPlayerCharactersDestroyRaw(requestParameters: SkyrimHelperApiPlayerCharactersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling skyrimHelperApiPlayerCharactersDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/skyrim-helper/api/player-characters/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skyrimHelperApiPlayerCharactersDestroy(requestParameters: SkyrimHelperApiPlayerCharactersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.skyrimHelperApiPlayerCharactersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skyrimHelperApiPlayerCharactersListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlayerCharacter>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/skyrim-helper/api/player-characters/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlayerCharacterFromJSON));
    }

    /**
     */
    async skyrimHelperApiPlayerCharactersList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlayerCharacter>> {
        const response = await this.skyrimHelperApiPlayerCharactersListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async skyrimHelperApiPlayerCharactersPartialUpdateRaw(requestParameters: SkyrimHelperApiPlayerCharactersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerCharacter>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling skyrimHelperApiPlayerCharactersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/skyrim-helper/api/player-characters/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPlayerCharacterToJSON(requestParameters.patchedPlayerCharacter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerCharacterFromJSON(jsonValue));
    }

    /**
     */
    async skyrimHelperApiPlayerCharactersPartialUpdate(requestParameters: SkyrimHelperApiPlayerCharactersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerCharacter> {
        const response = await this.skyrimHelperApiPlayerCharactersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async skyrimHelperApiPlayerCharactersRetrieveRaw(requestParameters: SkyrimHelperApiPlayerCharactersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerCharacter>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling skyrimHelperApiPlayerCharactersRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/skyrim-helper/api/player-characters/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerCharacterFromJSON(jsonValue));
    }

    /**
     */
    async skyrimHelperApiPlayerCharactersRetrieve(requestParameters: SkyrimHelperApiPlayerCharactersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerCharacter> {
        const response = await this.skyrimHelperApiPlayerCharactersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async skyrimHelperApiPlayerCharactersUpdateRaw(requestParameters: SkyrimHelperApiPlayerCharactersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerCharacter>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling skyrimHelperApiPlayerCharactersUpdate.');
        }

        if (requestParameters.playerCharacter === null || requestParameters.playerCharacter === undefined) {
            throw new runtime.RequiredError('playerCharacter','Required parameter requestParameters.playerCharacter was null or undefined when calling skyrimHelperApiPlayerCharactersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/skyrim-helper/api/player-characters/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlayerCharacterToJSON(requestParameters.playerCharacter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerCharacterFromJSON(jsonValue));
    }

    /**
     */
    async skyrimHelperApiPlayerCharactersUpdate(requestParameters: SkyrimHelperApiPlayerCharactersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerCharacter> {
        const response = await this.skyrimHelperApiPlayerCharactersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
